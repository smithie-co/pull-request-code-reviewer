---
description: 
globs: 
alwaysApply: true
---
## SOLID Principles

When developing Python code for this project, ensure that the design adheres to the SOLID principles:

1.  **Single Responsibility Principle (SRP):**
    *   A class or module should have only one reason to change, meaning it should have only one job or responsibility.
    *   Avoid creating classes that do too many things. Break them down into smaller, focused classes/modules.

2.  **Open/Closed Principle (OCP):**
    *   Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.
    *   Use abstractions (e.g., abstract base classes, interfaces if applicable in a Pythonic way) and polymorphism to allow behavior to be extended without changing existing code.

3.  **Liskov Substitution Principle (LSP):**
    *   Objects of a superclass should be replaceable with objects of its subclasses without affecting the correctness of the program.
    *   Ensure that subclasses can be used wherever their parent classes are expected, without introducing unexpected behavior or errors.

4.  **Interface Segregation Principle (ISP):**
    *   No client should be forced to depend on methods it does not use. Interfaces should be small and focused.
    *   In Python, this often translates to designing classes with minimal, cohesive interfaces. Avoid "fat" classes with many methods serving different clients.

5.  **Dependency Inversion Principle (DIP):**
    *   High-level modules should not depend on low-level modules. Both should depend on abstractions.
    *   Abstractions should not depend on details. Details should depend on abstractions.
    *   Use dependency injection or service locators where appropriate to decouple components.

